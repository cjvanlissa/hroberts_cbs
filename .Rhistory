scales_list$green <- NULL
scales_list$plea <- paste0("alpha", 1:4)
scales_list$safe <- paste0("alpha", 6:11)
scales_list$green <- c("park", "play", "sport", "forest")
scales_list$blue <- c("river", "lake", "beach")
scales_list$noi <- c("traffic", "inside", "outside")
# Reverse code variables --------------------------------------------------
rev_codes <- c("coh4", "coh5", "alpha1", "alpha3", "traffic", "pss4", "pss5", "pss7", "pss8")
#describe(df[, rev_codes])
#head(df[, rev_codes])
df[rev_codes] <- lapply(df[rev_codes], function(x){(max(x, na.rm = TRUE)+1)-x})
#describe(df[, rev_codes])
#head(df[, rev_codes])
#grep("rev$", names(df), value = T)
factor_vars <- sapply(df, function(x){!is.null(attr(x, "labels"))}) & !names(df) %in% unlist(scales_list)
df[factor_vars] <- lapply(df[factor_vars], haven::as_factor)
labelled_vars <- sapply(df, class) == "haven_labelled"
df[labelled_vars] <- lapply(df[labelled_vars], as.numeric)
df <- as.data.frame(df)
# Make parcels ------------------------------------------------------------
parcels <- parcel_items(df, scales_list)
parcels
layout <- read.csv("layout2020.csv", header = FALSE, stringsAsFactors = FALSE)
edg <- tidySEM:::get_edges.mplus.object(sem_mod_1112_full)
edg$group <- c("LO" = "Home", "HI" = "Away")[edg$group]
edg <- edg[!edg$arrow == "both", ]
nod <- get_nodes(sem_mod_1112_full)
nod$group <- c("LO" = "Home", "HI" = "Away")[nod$group]
nod <- nod[nod$name %in% unlist(layout),]
nod$label <- gsub("\\n.*$", "", nod$label)
labels <- c("GREEN" = "Green space",
"BLUE" = "Blue space",
"PLEA" = "Pleasantness",
"NOI" = "Environmental\ndisturbance",
"SAFE"  = "Safety",
"COH" = "Social cohesion",
"PHYS" = "Physical activity",
"PSS" = "Stress",
"PHQ" ="Depression"
)
nod$label <- labels[nod$label]
edg <- edg[edg$from %in% unlist(layout) & edg$to %in% unlist(layout), ]
edg$curvature[edg$curvature == 60] <- -20
#edg <- edg[is.na(edg$curvature), ]
prep <- prepare_graph(edges = edg, layout = layout, nodes = nod, text_size = 3.5, ellipses_height = 1.3, spacing_y = 2.5)
edges(prep)$connect_from <- "left"
edges(prep)$connect_to <- "right"
edges(prep)$label_location <- .5
edges(prep)[edges(prep)$from == "PHYS" & edges(prep)$to %in% c("NOI", "SAFE", "COH"), ]$label_location <- .8
edges(prep)[edges(prep)$from == "PSS" & edges(prep)$to %in% c("GREEN", "BLUE", "PLEA"), ]$label_location <- .8
edges(prep)$connect_from[edges(prep)$from == "PHQ" & edges(prep)$to %in% c("PSS", "PHYS")] <- rep(c("top", "bottom"), 2)
edges(prep)$curvature[edges(prep)$curvature ==20] <- -75
edges(prep)$connect_from[edges(prep)$curvature ==-75] <- "top"
edges(prep)$connect_to[edges(prep)$curvature ==-75] <- "bottom"
edges(prep) <- edges(prep)[-which(edges(prep)$curvature ==-20), ]
#edges(prep)$label_location <- .8
p <- plot(prep)
p <- p + facet_grid(group~., labeller = labeller(group = c('Away'="Low strength of exposure", 'Home'="High strength of exposure")))
layout <- read.csv("layout2020.csv", header = FALSE, stringsAsFactors = FALSE)
edg <- tidySEM:::get_edges.mplus.object(sem_mod_1112_full)
edg$group <- c("LO" = "Home", "HI" = "Away")[edg$group]
edg <- edg[!edg$arrow == "both", ]
nod <- get_nodes(sem_mod_1112_full)
nod$group <- c("LO" = "Home", "HI" = "Away")[nod$group]
nod <- nod[nod$name %in% unlist(layout),]
nod$label <- gsub("\\n.*$", "", nod$label)
labels <- c("GREEN" = "Green space",
"BLUE" = "Blue space",
"PLEA" = "Pleasantness",
"NOI" = "Environmental\ndisturbance",
"SAFE"  = "Safety",
"COH" = "Social cohesion",
"PHYS" = "Physical activity",
"PSS" = "Stress",
"PHQ" ="Depression"
)
nod$label <- labels[nod$label]
edg <- edg[edg$from %in% unlist(layout) & edg$to %in% unlist(layout), ]
edg$curvature[edg$curvature == 60] <- -20
#edg <- edg[is.na(edg$curvature), ]
prep <- prepare_graph(edges = edg, layout = layout, nodes = nod, text_size = 3.5, ellipses_height = 1.3, spacing_y = 2.5)
edges(prep)$connect_from <- "left"
edges(prep)$connect_to <- "right"
edges(prep)$label_location <- .5
edges(prep)
edges(prep)[edges(prep)$from == "PHYS" & edges(prep)$to %in% c("NOI", "SAFE", "COH"), ]
edges(prep)
edges(prep)[edges(prep)$to == "PHYS" & edges(prep)$from %in% c("NOI", "SAFE", "COH"), ]
edges(prep)[edges(prep)$to == "PHYS" & edges(prep)$from %in% c("NOI", "SAFE", "COH"), ]$label_location <- .8
edges(prep)[edges(prep)$to == "PSS" & edges(prep)$from %in% c("GREEN", "BLUE", "PLEA"), ]$label_location <- .8
edges(prep)$connect_from[edges(prep)$from == "PHQ" & edges(prep)$to %in% c("PSS", "PHYS")] <- rep(c("top", "bottom"), 2)
edges(prep)$connect_from[edges(prep)$from == "PHQ" & edges(prep)$to %in% c("PSS", "PHYS")]
edges(prep)$connect_from[edges(prep)$to == "PHQ" & edges(prep)$from %in% c("PSS", "PHYS")] <- rep(c("top", "bottom"), 2)
edges(prep)$curvature[edges(prep)$curvature ==20] <- -75
edges(prep)$connect_from[edges(prep)$curvature ==-75] <- "top"
edges(prep)$connect_to[edges(prep)$curvature ==-75] <- "bottom"
edges(prep) <- edges(prep)[-which(edges(prep)$curvature ==-20), ]
#edges(prep)$label_location <- .8
p <- plot(prep)
p
layout <- read.csv("layout2020.csv", header = FALSE, stringsAsFactors = FALSE)
edg <- tidySEM:::get_edges.mplus.object(sem_mod_1112_full)
edg$group <- c("LO" = "Home", "HI" = "Away")[edg$group]
edg <- edg[!edg$arrow == "both", ]
nod <- get_nodes(sem_mod_1112_full)
nod$group <- c("LO" = "Home", "HI" = "Away")[nod$group]
nod <- nod[nod$name %in% unlist(layout),]
nod$label <- gsub("\\n.*$", "", nod$label)
labels <- c("GREEN" = "Green space",
"BLUE" = "Blue space",
"PLEA" = "Pleasantness",
"NOI" = "Environmental\ndisturbance",
"SAFE"  = "Safety",
"COH" = "Social cohesion",
"PHYS" = "Physical activity",
"PSS" = "Stress",
"PHQ" ="Depression"
)
nod$label <- labels[nod$label]
edg <- edg[edg$from %in% unlist(layout) & edg$to %in% unlist(layout), ]
edg$curvature[edg$curvature == 60] <- -20
#edg <- edg[is.na(edg$curvature), ]
prep <- prepare_graph(edges = edg, layout = layout, nodes = nod, text_size = 3.5, ellipses_height = 1.3, spacing_y = 2.5)
edges(prep)$connect_from <- "left"
edges(prep)$connect_to <- "right"
edges(prep)$label_location <- .5
edges(prep)[edges(prep)$to == "PHYS" & edges(prep)$from %in% c("NOI", "SAFE", "COH"), ]$label_location <- .8
edges(prep)[edges(prep)$to == "PSS" & edges(prep)$from %in% c("GREEN", "BLUE", "PLEA"), ]$label_location <- .8
edges(prep)$connect_from[edges(prep)$to == "PHQ" & edges(prep)$from %in% c("PSS", "PHYS")] <- rep(c("bottom", "top"), 2)
edges(prep)$curvature[edges(prep)$curvature ==20] <- -75
edges(prep)$connect_from[edges(prep)$curvature ==-75] <- "bottom"
edges(prep)$connect_to[edges(prep)$curvature ==-75] <- "top"
edges(prep) <- edges(prep)[-which(edges(prep)$curvature ==-20), ]
#edges(prep)$label_location <- .8
p <- plot(prep)
p <- p + facet_grid(group~., labeller = labeller(group = c('Away'="Low strength of exposure", 'Home'="High strength of exposure")))
p
layout <- read.csv("layout2020.csv", header = FALSE, stringsAsFactors = FALSE)
edg <- tidySEM:::get_edges.mplus.object(sem_mod_1112_full)
edg$group <- c("LO" = "Home", "HI" = "Away")[edg$group]
edg <- edg[!edg$arrow == "both", ]
nod <- get_nodes(sem_mod_1112_full)
nod$group <- c("LO" = "Home", "HI" = "Away")[nod$group]
nod <- nod[nod$name %in% unlist(layout),]
nod$label <- gsub("\\n.*$", "", nod$label)
labels <- c("GREEN" = "Green space",
"BLUE" = "Blue space",
"PLEA" = "Pleasantness",
"NOI" = "Environmental\ndisturbance",
"SAFE"  = "Safety",
"COH" = "Social cohesion",
"PHYS" = "Physical activity",
"PSS" = "Stress",
"PHQ" ="Depression"
)
nod$label <- labels[nod$label]
edg <- edg[edg$from %in% unlist(layout) & edg$to %in% unlist(layout), ]
edg$curvature[edg$curvature == 60] <- -20
#edg <- edg[is.na(edg$curvature), ]
prep <- prepare_graph(edges = edg, layout = layout, nodes = nod, text_size = 3.5, ellipses_height = 1.3, spacing_y = 2.5)
edges(prep)$label_location <- .5
edges(prep)[edges(prep)$to == "PHYS" & edges(prep)$from %in% c("NOI", "SAFE", "COH"), ]$label_location <- .8
edges(prep)[edges(prep)$to == "PSS" & edges(prep)$from %in% c("GREEN", "BLUE", "PLEA"), ]$label_location <- .8
p <- plot(prep)
p <- p + facet_grid(group~., labeller = labeller(group = c('Away'="Low strength of exposure", 'Home'="High strength of exposure")))
p
layout <- read.csv("layout2020.csv", header = FALSE, stringsAsFactors = FALSE)
edg <- tidySEM:::get_edges.mplus.object(sem_mod_1112_full)
edg$group <- c("LO" = "Home", "HI" = "Away")[edg$group]
edg <- edg[!edg$arrow == "both", ]
nod <- get_nodes(sem_mod_1112_full)
nod$group <- c("LO" = "Home", "HI" = "Away")[nod$group]
nod <- nod[nod$name %in% unlist(layout),]
nod$label <- gsub("\\n.*$", "", nod$label)
labels <- c("GREEN" = "Green space",
"BLUE" = "Blue space",
"PLEA" = "Pleasantness",
"NOI" = "Environmental\ndisturbance",
"SAFE"  = "Safety",
"COH" = "Social cohesion",
"PHYS" = "Physical activity",
"PSS" = "Stress",
"PHQ" ="Depression"
)
nod$label <- labels[nod$label]
edg <- edg[edg$from %in% unlist(layout) & edg$to %in% unlist(layout), ]
#edg$curvature[edg$curvature == 60] <- -20
#edg <- edg[is.na(edg$curvature), ]
prep <- prepare_graph(edges = edg, layout = layout, nodes = nod, text_size = 3.5, ellipses_height = 1.3, spacing_y = 2.5, angle = 1)
plot(prep)
p <- plot(prep)
p <- p + facet_grid(group~., labeller = labeller(group = c('Away'="Low strength of exposure", 'Home'="High strength of exposure")))
p
edges(prep)$label_location <- .5
edges(prep)[edges(prep)$to == "PHYS" & edges(prep)$from %in% c("NOI", "SAFE", "COH"), ]$label_location <- .8
edges(prep)[edges(prep)$to == "PSS" & edges(prep)$from %in% c("GREEN", "BLUE", "PLEA"), ]$label_location <- .8
p <- plot(prep)
p <- p + facet_grid(group~., labeller = labeller(group = c('Away'="Low strength of exposure", 'Home'="High strength of exposure")))
p
prep <- prepare_graph(edges = edg, layout = layout, nodes = nod, text_size = 3.5, ellipses_height = 1.3, spacing_y = 2.5, angle = 1)
edges(prep)$label_location <- .5
edges(prep)[edges(prep)$to == "PHYS" & edges(prep)$from %in% c("NOI", "SAFE", "COH"), ]$label_location <- .2
edges(prep)[edges(prep)$to == "PSS" & edges(prep)$from %in% c("GREEN", "BLUE", "PLEA"), ]$label_location <- .2
edges(prep)$curvature[edges(prep)$curvature ==20] <- -75
edges(prep)$connect_from[edges(prep)$curvature ==-75] <- "bottom"
edges(prep)$connect_to[edges(prep)$curvature ==-75] <- "top"
edges(prep) <- edges(prep)[-which(edges(prep)$curvature ==-20), ]
p <- plot(prep)
p <- p + facet_grid(group~., labeller = labeller(group = c('Away'="Low strength of exposure", 'Home'="High strength of exposure")))
p
prep <- prepare_graph(edges = edg, layout = layout, nodes = nod, text_size = 3.5, ellipses_height = 1.3, spacing_y = 2.5, angle = 1)
edges(prep)$label_location <- .5
edges(prep)[edges(prep)$to == "PHYS" & edges(prep)$from %in% c("NOI", "SAFE", "COH"), ]$label_location <- .2
edges(prep)[edges(prep)$to == "PSS" & edges(prep)$from %in% c("GREEN", "BLUE", "PLEA"), ]$label_location <- .2
p <- plot(prep)
p <- p + facet_grid(group~., labeller = labeller(group = c('Away'="Low strength of exposure", 'Home'="High strength of exposure")))
p
edges(prep)$curvature
library(dplyr)
install.packages("cjvanlissa/tidySEM")
edges(prep) <- edges(prep)[!(is.na(edges(prep)$curvature) & !(edges(prep)$from =="PSS" & edges(prep)$to =="PHYS"))]
edges(prep) <- edges(prep)[!(is.na(edges(prep)$curvature) & !(edges(prep)$from =="PSS" & edges(prep)$to =="PHYS")),]
p <- plot(prep)
p
edges(prep)[!(is.na(edges(prep)$curvature) & !(edges(prep)$from =="PSS" & edges(prep)$to =="PHYS")),]
prep <- prepare_graph(edges = edg, layout = layout, nodes = nod, text_size = 3.5, ellipses_height = 1.3, spacing_y = 2.5, angle = 1)
edges(prep) <- edges(prep)[(is.na(edges(prep)$curvature) | !(edges(prep)$from =="PSS" & edges(prep)$to =="PHYS")),]
edges(prep)
prep <- prepare_graph(edges = edg, layout = layout, nodes = nod, text_size = 3.5, ellipses_height = 1.3, spacing_y = 2.5, angle = 1)
edges(prep)$label_location <- .5
edges(prep)[edges(prep)$to == "PHYS" & edges(prep)$from %in% c("NOI", "SAFE", "COH"), ]$label_location <- .2
edges(prep)[edges(prep)$to == "PSS" & edges(prep)$from %in% c("GREEN", "BLUE", "PLEA"), ]$label_location <- .2
edges(prep) <- edges(prep)[(is.na(edges(prep)$curvature) | (edges(prep)$from =="PSS" & edges(prep)$to =="PHYS")),]
plot(prep)
prep <- prepare_graph(edges = edg, layout = layout, nodes = nod, text_size = 3.5, ellipses_height = 1.3, spacing_y = 2.5, angle = 1)
edges(prep)$label_location <- .5
edges(prep)[edges(prep)$to == "PHYS" & edges(prep)$from %in% c("NOI", "SAFE", "COH"), ]$label_location <- .2
edges(prep)[edges(prep)$to == "PSS" & edges(prep)$from %in% c("GREEN", "BLUE", "PLEA"), ]$label_location <- .2
edges(prep) <- edges(prep)[(is.na(edges(prep)$curvature) | (edges(prep)$from =="PSS" & edges(prep)$to =="PHYS")),]
edges(prep)$curvature[!is.na(edges(prep)$curvature)] <- -75
edges(prep)$connect_from[!is.na(edges(prep)$curvature)] <- "bottom"
edges(prep)$connect_to[!is.na(edges(prep)$curvature)] <- "top"
plot(prep)
prep <- prepare_graph(edges = edg, layout = layout, nodes = nod, text_size = 3.5, ellipses_height = 1.3, spacing_y = 2.5, angle = 1)
edges(prep)$label_location <- .5
edges(prep)[edges(prep)$to == "PHYS" & edges(prep)$from %in% c("NOI", "SAFE", "COH"), ]$label_location <- .2
edges(prep)[edges(prep)$to == "PSS" & edges(prep)$from %in% c("GREEN", "BLUE", "PLEA"), ]$label_location <- .2
edges(prep) <- edges(prep)[(is.na(edges(prep)$curvature) | (edges(prep)$from =="PSS" & edges(prep)$to =="PHYS")),]
edges(prep)$curvature[!is.na(edges(prep)$curvature)] <- -75
edges(prep)$connect_from[!is.na(edges(prep)$curvature)] <- "top"
edges(prep)$connect_to[!is.na(edges(prep)$curvature)] <- "bottom"
p <- plot(prep)
p <- p + facet_grid(group~., labeller = labeller(group = c('Away'="Low strength of exposure", 'Home'="High strength of exposure")))
p
library(ggplot2)
ggsave("Standardized_regs.png", p, width = 8, height = 10)
ggsave("Standardized_regs.pdf", p, width = 8, height = 10)
gert::git_init()
worcs:::has_git()
repo = "."
ab_path <- normalizePath(repo)
ab_path
list.files()
list.dirs()
file.path(ab_path, ".git")
dir.exists(file.path(ab_path, ".git"))
stop("No valid Git repository exists at ", file.path(ab_path, ".git")))
stop("No valid Git repository exists at ", file.path(ab_path, ".git"))
stop("No valid Git repository exists at ", normalizePath(file.path(ab_path, ".git")))
stop("No valid Git repository exists at ", normalizePath(file.path(ab_path, ".git")), call. = FALSE)
(!file.exists(file.path(ab_path, ".gitignore")))
file.create(file.path(ab_path, ".gitignore"))
git_ignore <- function(..., ignore = TRUE, repo = "."){
ab_path <- normalizePath(repo)
if(!dir.exists(file.path(ab_path, ".git"))){
stop("No valid Git repository exists at ", normalizePath(file.path(ab_path, ".git")), call. = FALSE)
}
browser()
dots <- unlist(list(...))
path_gitig <- file.path(ab_path, ".gitignore")
cl <- match.call()
cl[["filename"]] <- path_gitig
cl[c("ignore", "repo")] <- NULL
cl[["modify"]] <- file.exists(path_gitig)
write_gitig(path_gitig, ..., modify = TRUE){
}
git_ignore <- function(..., ignore = TRUE, repo = "."){
ab_path <- normalizePath(repo)
if(!dir.exists(file.path(ab_path, ".git"))){
stop("No valid Git repository exists at ", normalizePath(file.path(ab_path, ".git")), call. = FALSE)
}
browser()
dots <- unlist(list(...))
path_gitig <- file.path(ab_path, ".gitignore")
cl <- match.call()
cl[["filename"]] <- path_gitig
cl[c("ignore", "repo")] <- NULL
cl[["modify"]] <- file.exists(path_gitig)
#write_gitig(path_gitig, ..., modify = TRUE){
}
git_ignore("constraints.RData", ".RData")
dots <- unlist(list(...))
dots
path_gitig <- file.path(ab_path, ".gitignore")
cl <- match.call()
cl
cl[["filename"]] <- path_gitig
cl[c("ignore", "repo")] <- NULL
cl
cl[c("ignore", "repo")] <- NULL
cl[["modify"]] <- file.exists(path_gitig)
cl
cl[1]
cl[2]
cl[[2]]
cl[[3]]
names(cl)
class(cl[[2]])
class(cl[[3]])
class(cl[[1]])
git_ignore <- function(..., ignore = TRUE, repo = "."){
ab_path <- normalizePath(repo)
if(!dir.exists(file.path(ab_path, ".git"))){
stop("No valid Git repository exists at ", normalizePath(file.path(ab_path, ".git")), call. = FALSE)
}
browser()
dots <- unlist(list(...))
path_gitig <- file.path(ab_path, ".gitignore")
cl <- match.call()
cl[["filename"]] <- path_gitig
cl[c("ignore", "repo")] <- NULL
cl[["modify"]] <- file.exists(path_gitig)
if(ignore){
ig_these <- names(cl) == "" & sapply(cl, class) == "character"
if(any(ig_these)){
cl[ig_these] <- lapply(cl[ig_these], function(x){ paste0("!", x) })
}
}
#write_gitig(path_gitig, ..., modify = TRUE){
}
git_ignore("constraints.RData", ".RData", ignore = T)
ig_these
git_ignore <- function(..., ignore = TRUE, repo = "."){
ab_path <- normalizePath(repo)
if(!dir.exists(file.path(ab_path, ".git"))){
stop("No valid Git repository exists at ", normalizePath(file.path(ab_path, ".git")), call. = FALSE)
}
browser()
dots <- unlist(list(...))
path_gitig <- file.path(ab_path, ".gitignore")
cl <- match.call()
cl[["filename"]] <- path_gitig
cl[c("ignore", "repo")] <- NULL
cl[["modify"]] <- file.exists(path_gitig)
if(ignore){
ig_these <- names(cl) == "" & sapply(cl, class) == "character"
if(any(ig_these)){
cl[ig_these] <- lapply(cl[ig_these], function(x){ paste0("!", x) })
browser()
}
}
#write_gitig(path_gitig, ..., modify = TRUE){
}
git_ignore <- function(..., ignore = TRUE, repo = "."){
ab_path <- normalizePath(repo)
if(!dir.exists(file.path(ab_path, ".git"))){
stop("No valid Git repository exists at ", normalizePath(file.path(ab_path, ".git")), call. = FALSE)
}
browser()
dots <- unlist(list(...))
path_gitig <- file.path(ab_path, ".gitignore")
cl <- match.call()
cl[["filename"]] <- path_gitig
cl[c("ignore", "repo")] <- NULL
cl[["modify"]] <- file.exists(path_gitig)
if(ignore){
ig_these <- names(cl) == "" & sapply(cl, class) == "character"
if(any(ig_these)){
cl[ig_these] <- lapply(cl[ig_these], function(x){ paste0("!", x) })
browser()
}
}
#write_gitig(path_gitig, ..., modify = TRUE){
}
git_ignore("constraints.RData", ".RData", ignore = T)
cl
git_ignore <- function(..., ignore = TRUE, repo = "."){
ab_path <- normalizePath(repo)
if(!dir.exists(file.path(ab_path, ".git"))){
stop("No valid Git repository exists at ", normalizePath(file.path(ab_path, ".git")), call. = FALSE)
}
dots <- unlist(list(...))
path_gitig <- file.path(ab_path, ".gitignore")
cl <- match.call()
cl[["filename"]] <- path_gitig
cl[c("ignore", "repo")] <- NULL
cl[["modify"]] <- file.exists(path_gitig)
if(ignore){
ig_these <- names(cl) == "" & sapply(cl, class) == "character"
if(any(ig_these)){
cl[ig_these] <- lapply(cl[ig_these], function(x){ paste0("!", x) })
}
}
eval.parent(cl)
}
git_ignore("constraints.RData", ".RData", ignore = F)
readLines(".gitignore")
git_ignore <- function(..., ignore = TRUE, repo = "."){
ab_path <- normalizePath(repo)
if(!dir.exists(file.path(ab_path, ".git"))){
stop("No valid Git repository exists at ", normalizePath(file.path(ab_path, ".git")), call. = FALSE)
}
dots <- unlist(list(...))
path_gitig <- file.path(ab_path, ".gitignore")
cl <- match.call()
browser()
cl[["filename"]] <- path_gitig
cl[c("ignore", "repo")] <- NULL
cl[["modify"]] <- file.exists(path_gitig)
if(ignore){
ig_these <- names(cl) == "" & sapply(cl, class) == "character"
if(any(ig_these)){
cl[ig_these] <- lapply(cl[ig_these], function(x){ paste0("!", x) })
}
}
eval.parent(cl)
}
git_ignore("constraints.RData", ".RData", ignore = F)
cl
git_ignore <- function(..., ignore = TRUE, repo = "."){
ab_path <- normalizePath(repo)
if(!dir.exists(file.path(ab_path, ".git"))){
stop("No valid Git repository exists at ", normalizePath(file.path(ab_path, ".git")), call. = FALSE)
}
dots <- unlist(list(...))
path_gitig <- file.path(ab_path, ".gitignore")
cl <- match.call()
browser()
cl[[1]] <- as.name("worcs:::write_gitig")
cl[["filename"]] <- path_gitig
cl[c("ignore", "repo")] <- NULL
cl[["modify"]] <- file.exists(path_gitig)
if(ignore){
ig_these <- names(cl) == "" & sapply(cl, class) == "character"
if(any(ig_these)){
cl[ig_these] <- lapply(cl[ig_these], function(x){ paste0("!", x) })
}
}
browser()
eval.parent(cl)
}
git_ignore("constraints.RData", ".RData", ignore = F)
cl
eval.parent(cl)
git_ignore <- function(..., ignore = TRUE, repo = "."){
ab_path <- normalizePath(repo)
if(!dir.exists(file.path(ab_path, ".git"))){
stop("No valid Git repository exists at ", normalizePath(file.path(ab_path, ".git")), call. = FALSE)
}
dots <- unlist(list(...))
path_gitig <- file.path(ab_path, ".gitignore")
cl <- match.call()
browser()
cl[[1]] <- as.symbol("worcs:::write_gitig")
cl[["filename"]] <- path_gitig
cl[c("ignore", "repo")] <- NULL
cl[["modify"]] <- file.exists(path_gitig)
if(ignore){
ig_these <- names(cl) == "" & sapply(cl, class) == "character"
if(any(ig_these)){
cl[ig_these] <- lapply(cl[ig_these], function(x){ paste0("!", x) })
}
}
browser()
eval.parent(cl)
}
git_ignore("constraints.RData", ".RData", ignore = F)
eval.parent(cl)
cl[[1]] <- as.call("worcs:::write_gitig")
cl[[1]] <- quote("worcs:::write_gitig")
cl
cl <- match.call()
class(cl[[1]])
git_ignore <- function(..., ignore = TRUE, repo = "."){
ab_path <- normalizePath(repo)
if(!dir.exists(file.path(ab_path, ".git"))){
stop("No valid Git repository exists at ", normalizePath(file.path(ab_path, ".git")), call. = FALSE)
}
dots <- unlist(list(...))
path_gitig <- file.path(ab_path, ".gitignore")
cl <- match.call()
browser()
cl[[1]] <- as.name("worcs:::write_gitig")
cl[["filename"]] <- path_gitig
cl[c("ignore", "repo")] <- NULL
cl[["modify"]] <- file.exists(path_gitig)
if(ignore){
ig_these <- names(cl) == "" & sapply(cl, class) == "character"
if(any(ig_these)){
cl[ig_these] <- lapply(cl[ig_these], function(x){ paste0("!", x) })
}
}
browser()
eval(cl, sys.frame(sys.parent()))
}
git_ignore("constraints.RData", ".RData", ignore = F)
cl
is.name(cl[[1]])
eval(cl, sys.frame(sys.parent()))
library(worcs)
git_ignore("constraints.RData", ".RData", ignore = F)
eval(cl, sys.frame(sys.parent()))
